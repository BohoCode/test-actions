on:
  workflow_call:
    inputs:
      tag:
        description: "Provide the tag if you want create the release from existing tag"
        required: false
        type: string
      set-property-command:
        required: false
        type: string
      is-final-release:
        required: false
        type: boolean
        default: false
      candidate-number:
        required: false
        type: string
        default: 1
    outputs:
      release_tag:
        description: "release tag created"
        value: ${{ jobs.release_master.outputs.release_tag }}
      release_branch:
        description: "release branch created"
        value: ${{ jobs.release_master.outputs.release_branch }}
env:
  GIT_AUTHOR_NAME: ${{ secrets.GIT_COMMIT_USERNAME }}
  GIT_AUTHOR_EMAIL: ${{ secrets.GIT_COMMIT_AUTHOR_EMAIL }}
  GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMIT_USERNAME }}
  GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMIT_AUTHOR_EMAIL }}

jobs:
  release_master:
    name: prepare release
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      release_tag: ${{ steps.create-release.outputs.release_tag }}
      release_branch: ${{ steps.create-release.outputs.release_branch }}

    steps:
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
        name: checkout master
        with:
          ref: ${{ inputs.tag }} # if tag is empty uses the default branch

      # https://github.com/crazy-max/ghaction-import-gpg
      # https://httgp.com/signing-commits-in-github-actions/
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_KEY_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      # https://semver.org/
      - name: Create release branch semver
        id: create-release
        run: |
          echo "VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )" >> $GITHUB_ENV
          echo "Version is: ${{ env.VERSION }}"
          if ${{ inputs.is-final-release }}; then 
            echo "release_tag=${{ env.VERSION }}" >> $GITHUB_ENV
            echo "release_tag=${{ env.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "release_tag=${{ env.VERSION }}-rc.${{ inputs.candidate-number }}" >> $GITHUB_ENV
            echo "release_tag=${{ env.VERSION }}-rc.${{ inputs.candidate-number }}" >> $GITHUB_OUTPUT
          fi
          echo "release_branch=release/${{ env.release_tag_version }}" >> $GITHUB_ENV
          echo "release_branch=release/${{ env.release_tag_version }}" >> $GITHUB_OUTPUT
          echo "Release is: ${{ env.release_tag }}"
          git checkout -b ${{ env.release_branch }}

      - name: Remove snapshot versions
        run: |
          mvn versions:set -DremoveSnapshot -DgenerateBackupPoms # remove snapshot and creates a backup of the poms

      - name: Update dependencies
        run: |
          echo "Command to execute: ${{ inputs.set-property-command }}"
          ${{ inputs.set-property-command }}

      - name: Push release branch
        run: |
          mvn versions:commit # accepts the changes and removes the backup of the pom 
          git add .
          git commit -m "Release ${{ env.release_tag }} branch ready"
          git push origin ${{ env.release_branch }}

      - name: create release tag
        id: release-tag
        if: ${{ inputs.is-candidate }}
        run: |
          git tag ${{ env.release_tag }}
          git push origin ${{ env.release_tag }}
