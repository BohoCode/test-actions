name: prepare release
on:
  workflow_call:
    inputs:
      tag:
        description: "Provide the tag if you want create the release from existing tag"
        required: false
        type: string
        default: ''
      set-property-command:
        required: false
        type: string
        default: ''
      is-final-release:
        required: false
        type: boolean
        default: false
      candidate-number:
        required: false
        type: string
        default: 1
    outputs:
      release_ref:
        description: "Release reference"
        value: ${{ jobs.release_prepare.outputs.release_ref }}
      tag_ref:
        description: "Tag reference"
        value: ${{ steps.release_prepare.outputs.tag_ref }}
#      release_tag:
#        description: "release tag created"
#        value: ${{ jobs.release_master.outputs.release_tag }}
#      release_branch:
#        description: "release branch created"
#        value: ${{ jobs.release_master.outputs.release_branch }}
env:
  GIT_AUTHOR_NAME: ${{ secrets.GIT_COMMIT_USERNAME }}
  GIT_AUTHOR_EMAIL: ${{ secrets.GIT_COMMIT_AUTHOR_EMAIL }}
  GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMIT_USERNAME }}
  GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMIT_AUTHOR_EMAIL }}

jobs:
  release_prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
#      release_tag: ${{ steps.create-release.outputs.release_tag }}
#      release_branch: ${{ steps.create-release.outputs.release_branch }}
      release_ref: ${{ steps.create-context.outputs.release_ref }}
      tag_ref: ${{ steps.create-context.outputs.tag_ref }}

    steps:
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
        name: checkout master
        with:
          ref: ${{ inputs.tag }} # if tag is empty uses the default branch

      # https://github.com/crazy-max/ghaction-import-gpg
      # https://httgp.com/signing-commits-in-github-actions/
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_KEY_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Remove snapshots suffix
        run: |
          mvn versions:set -DremoveSnapshot -DgenerateBackupPoms # remove snapshot and creates a backup of the poms

      - name: get version
        run: |
          ls -al
          echo "VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )" >> $GITHUB_ENV

      # https://semver.org/
      - name: Create environment context
        id: create-context
        run: |
          echo "Version is: ${{ env.VERSION }}"
          if ${{ inputs.is-final-release }}; then
            echo "is a final release"
            echo "release_ref=v${{ env.VERSION }}" >> $GITHUB_OUTPUT
            echo "tag_ref=${{ env.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "is not a final release"
            echo "release_ref=v${{ env.VERSION }}-rc.${{ inputs.candidate-number }}" >> $GITHUB_OUTPUT
          echo "tag_ref=${{ env.VERSION }}-rc.${{ inputs.candidate-number }}" >> $GITHUB_OUTPUT
          fi

#      - name: Create branch context
#        run: |
#          echo "release_branch=release/${{ env.release_tag }}" >> $GITHUB_ENV
#          echo "release_branch=release/${{ env.release_tag }}" >> $GITHUB_OUTPUT

      - name: create release branch
        run: |          
          echo "Release ref: ${{ steps.create-context.outputs.release_ref }}"
          git checkout -b ${{ steps.create-context.outputs.release_ref }}

      - name: Update dependencies
        if: ${{ inputs.set-property-command }} != ''
        run: |
          echo "Command to execute: ${{ inputs.set-property-command }}"
          ${{ inputs.set-property-command }}

      - name: Push release branch
        run: |
          mvn versions:commit # accepts the changes and removes the backup of the pom 
          git add .
          git commit -m "Release v${{ steps.create-context.outputs.release_ref }} branch ready"
          git push origin ${{ steps.create-context.outputs.release_ref }}

      - name: create release tag
        id: release-tag
        if: ${{ inputs.tag }} != ''
        run: |
          git tag ${{ steps.create-context.outputs.tag_ref }}
          git push origin tag ${{ steps.create-context.outputs.tag_ref }}
