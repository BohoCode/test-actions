name: Upload Release Asset

on:
  push:
    tags:
      - '*'
    branches:
      - master

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up forgerock maven repository
        uses: actions/setup-java@v1
        with: # running setup-java and overwrites the settings.xml
          java-version: '11'
          architecture: x64
          server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy

      - name: prepare artifact
        id: prepare
        run: |
          echo "::set-output name=artifact-id::$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)"
          echo "::set-output name=artifact-version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
          cat /home/runner/.m2/settings.xml

      - name: Set up forgerock maven repository
        if: contains(${{ steps.prepare.outputs.artifact-version }}, 'SNAPSHOT')
        uses: actions/setup-java@v1
        with: # add snapshots repository on the settings.xml
          java-version: '11'
          architecture: x64
          server-id: snapshots # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy

      - name: Build project # This would actually build your project, using zip for an example artifact
        id: build_project
        run: mvn -B package --file pom.xml

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
          STEPS_CONTEXT: ${{ toJson(steps) }}
          GITHUB_CONTEXT: ${{ toJson(github) }}
          JOB_CONTEXT: ${{ toJson(job) }}
        with:
          tag_name: v${{ steps.prepare.outputs.artifact-version }}
          release_name: Release v${{ steps.prepare.outputs.artifact-version }}
          draft: false
          prerelease: false
          
      - name: Dump some context and values
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
          GITHUB_CONTEXT: ${{ toJson(github) }}
          JOB_CONTEXT: ${{ toJson(job) }}
          WORK_DIR: ${{ github.workspace }}
        run: |
         echo "$STEPS_CONTEXT"
         echo " "
         echo "$GITHUB_CONTEXT"
         echo " "
         echo "$JOB_CONTEXT"
         echo " "
         echo "$WORK_DIR"
         echo " "
         ls -al
         echo artifact = ${{ steps.build_project.outputs.artifact-id }}-${{ steps.build_project.outputs.artifact-version }}.jar
        
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
          STEPS_CONTEXT: ${{ toJson(steps) }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: target/${{ steps.prepare.outputs.artifact-id }}-${{ steps.prepare.outputs.artifact-version }}.jar # reference from 'prepare' step artifact-id and artifact-version output
          asset_name: ${{ steps.prepare.outputs.artifact-id }}-${{ steps.prepare.outputs.artifact-version }}.jar # reference from 'prepare' step artifact-id and artifact-version output
          asset_content_type: application/zip
          
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
