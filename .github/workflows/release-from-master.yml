on:
  workflow_call:
    inputs:
      set-property-command:
        required: false
        type: string
  workflow_dispatch:
    inputs:
      set-property-command:
        required: false
        type: string
env:
  GIT_AUTHOR_NAME: ${{ secrets.GIT_COMMIT_USERNAME }}
  GIT_AUTHOR_EMAIL: ${{ secrets.GIT_COMMIT_AUTHOR_EMAIL }}
  GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMIT_USERNAME }}
  GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMIT_AUTHOR_EMAIL }}

jobs:
  release_master:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: checkout master
        id: checkout
        #with:
          #path: secure-api-gateway-parent

      - name: remove project snapshot
        run: |
          ls -al
          mvn help:evaluate -Dexpression=project.version -q -DforceStdout
          mvn versions:set -DremoveSnapshot -DgenerateBackupPoms # remove snapshot and creates a backup of the poms

      - name: Release version
        run: |
          ls -al
          echo "VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )" >> $GITHUB_ENV
          echo "Version is: ${{ env.VERSION }}"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_KEY_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      #- name: set git config
      #  run: |
      #    git config user.email ${{ secrets.GIT_COMMIT_AUTHOR_EMAIL }}
      #    git config user.name ${{ secrets.GIT_COMMIT_USERNAME }}

      - name: create release branch
        run: |
          echo "Version is: ${{ env.VERSION }}"
          git checkout -b release/${{ env.VERSION }}
          ls -al
          cat pom.xml
          git branch -l

      - name: update dependencies
        run: |
          echo "Command to execute: ${{ inputs.set-property-command }}"
          ${{ inputs.set-property-command }}

      - name: Check release branch
        run: |
          ls -al
          cat pom.xml
          mvn versions:commit # accepts the changes and removes the backup of the pom 
          git add .
          git commit -m "Release ${{ env.VERSION }} branch ready"
          git push origin release/${{ env.VERSION }}
